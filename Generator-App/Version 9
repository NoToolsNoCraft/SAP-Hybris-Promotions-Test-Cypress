<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Promotion Cypress Script Generator</title>
    <style>
        body {
            font-family: 'Times New Roman', Times, serif, sans-serif;
            margin: 20px;
            padding: 20px;
            background-color: #f4f4f4;
        }
        h1 {
            text-align: center;
        }
        form {
            display: flex;
            flex-direction: column;
            max-width: 600px;
            margin: auto;
            
        }
        .form-group {
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
            align-items: flex-start; /* Aligns label and input to the left */
        }
        .form-group input, 
        .form-group select {
            width: calc(100% - 10px); /* Ensure input fields are not too wide */
            box-sizing: border-box;
        }

        input, select, button {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
        }
        .promotion-section {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #fff;
            border-radius: 5px;
            position: relative;
        }
        .remove-promotion-btn {
            display: block;
            margin: 80px auto 20px auto;
            margin-right: 10px;
            background-color: #fb061e;
            color: #fff;
            border: none;
            padding: 10px;
            cursor: pointer;
            border-radius: 5px;
            width: 25%;
            
        }
        .add-promotion-btn {
            display: block;
            width: 100%;
            margin: 20px auto;
            padding: 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .testing-section {
            display: flex;
    flex-direction: column;
    padding: 30px;
    border: 1px dashed #999;
    margin-top: 10px;
    box-sizing: border-box;
        }
        .item-expected-value {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%; /* Ensure it takes up the full width */
    margin-bottom: 10px;
}

.item-expected-value label {
    flex-basis: 35%; /* Label width inside Testing Section */
    text-align: left;
}

.item-expected-value input {
    flex-basis: 30%; /* Adjusted width to be shorter */
    max-width: 220px; /* Set a maximum width for better control */
    padding: 5px;
    box-sizing: border-box;
    margin-left: 10px;
}
        .additional-expected-values {
    margin-top: 10px;
}
#item {
    width: 300px; /* Bigger Item field */
}
    </style>
</head>
<body>

<h1>Promotion Cypress Script Generator</h1>

<form id="scriptGenerator">
    <div class="form-group">
        <label for="environment">Select Environment:</label>
        <select id="environment">
            <option value="https://backoffice.stg.iqos.com/backoffice/login.zul">STG</option>
            <option value="https://backoffice.iqos.com/backoffice/login.zul">PROD</option>
            <option value="https://backoffice.pp.iqos.com/backoffice/login.zul">PreProd</option>
        </select>
    </div>

    <div class="form-group">
        <label for="username">Username/Email:</label>
        <input type="text" id="username" placeholder="Enter your username or email" required>
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" placeholder="Enter your password" required>
    </div>

    <div class="form-group">
        <label for="role">Select Role:</label>
        <select id="role">
            <option value="Promotion Editor">Promotion Editor</option>
            <option value="Promotion Publisher">Promotion Publisher</option>
        </select>
    </div>

    <div class="form-group">
        <label for="country">Select Country:</label>
        <select id="country">
            <option value="Tunisia">Tunisia</option>
            <option value="Morocco">Morocco</option>
            <option value="Germany">Germany</option>
            <option value="Spain">Spain</option>
            <option value="Czech Republic">Czech Republic</option>
            <option value="Slovakia">Slovakia</option>
            <option value="Portugal">Portugal</option>
            <option value="United Arab Emirates">United Arab Emirates</option>
            <option value="Indonesia">Indonesia</option>
            <option value="Taiwan">Taiwan</option>
            <option value="Netherlands">Netherlands</option>
            <option value="Romania">Romania</option>
            <option value="United Kingdom">United Kingdom</option>
            <option value="Romania">Romania</option>
            <option value="Egypt">Egypt</option>
            <option value="Philippines">Philippines</option>
            <option value="Costa Rica">Costa Rica</option>
            <option value="Mexico">Mexico</option>
            <!-- Add more countries as needed -->
        </select>
    </div>

    <div class="form-group">
        <label for="catalogEnv">Select Catalog Environment:</label>
        <select id="catalogEnv">
            <option value="Staged">Staged</option>
            <option value="Online">Online</option>
        </select>
    </div>

    <div id="promotionSections">
        <div class="promotion-section" id="promotion1">
            <h2>Promotion 1</h2>
            <div class="form-group">
                <label for="promotionCode1">Promotion Code:</label>
                <input type="text" id="promotionCode1" placeholder="Enter promotion code" required>
            </div>
            <div class="form-group">
                <label for="promotionName1">Promotion Name:</label>
                <input type="text" id="promotionName1" placeholder="Enter promotion name" required>
            </div>
            <div class="form-group">
                <label for="websiteEnv1">Website Environment / Status:</label>
                <input type="text" id="websiteEnv1" placeholder="Enter website environment or status (Published or Inactive)" required>
            </div>
            <div class="form-group">
                <label for="promotionVersion1">Promotion Version:</label>
                <input type="text" id="promotionVersion1" placeholder="Enter promotion version" required>
            </div>
            <div id="testingSectionsContainer1"></div>
            <button type="button" onclick="addTestingSection(1)">Add Testing Section</button>
            <button type="button" class="remove-promotion-btn">Remove Promotion</button>
        </div>
    </div>

    <button type="button" class="add-promotion-btn" id="addPromotionBtn">Add Another Promotion</button>
    <button type="submit">Generate Script</button>
</form>

<pre id="generatedScript" style="background-color: #fff; padding: 10px; border-radius: 5px; display: none;"></pre>

<script>
    let promotionCount = 1;

    <!-- Function to add multiple expected values input -->
function addExpectedValueField(container) {
    const div = document.createElement('div');
    div.className = 'item-expected-value';
    div.innerHTML = `
        <label>Expected Values (space-separated): 
            <input type="text" class="expectedValue" placeholder="Enter product codes separated by spaces">
        </label>
        <button type="button" class="remove-expected-value-btn" onclick="removeExpectedValueField(this)">X</button>
    `;
    container.appendChild(div);
}

    // Function to remove an Expected Value field
    function removeExpectedValueField(button) {
        button.parentElement.remove();
    }

    // Add new promotion section
document.getElementById('addPromotionBtn').addEventListener('click', function() {
    promotionCount++;
    const promotionSection = document.createElement('div');
    promotionSection.className = 'promotion-section';
    promotionSection.id = 'promotion' + promotionCount;
    promotionSection.innerHTML = 
        `<h2>Promotion ${promotionCount}</h2>
        <div class="form-group">
            <label for="promotionCode${promotionCount}">Promotion Code:</label>
            <input type="text" id="promotionCode${promotionCount}" placeholder="Enter promotion code" required>
        </div>
        <div class="form-group">
            <label for="promotionName${promotionCount}">Promotion Name:</label>
            <input type="text" id="promotionName${promotionCount}" placeholder="Enter promotion name" required>
        </div>
        <div class="form-group">
            <label for="websiteEnv${promotionCount}">Website Environment / Status:</label>
            <input type="text" id="websiteEnv${promotionCount}" placeholder="Enter website environment or status (Published or Inactive)" required>
        </div>
        <div class="form-group">
            <label for="promotionVersion${promotionCount}">Promotion Version:</label>
            <input type="text" id="promotionVersion${promotionCount}" placeholder="Enter promotion version" required>
        </div>
        <div id="testingSectionsContainer${promotionCount}"></div>
        <button type="button" onclick="addTestingSection(${promotionCount})">Add Testing Section</button>
        <button type="button" class="remove-promotion-btn" onclick="removePromotion(${promotionCount})">Remove Promotion</button>
    `;
    document.getElementById('promotionSections').appendChild(promotionSection);
});

document.getElementById('scriptGenerator').addEventListener('submit', function(event) {
    event.preventDefault();

    const environment = document.getElementById('environment').value;
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    const role = document.getElementById('role').value;
    const country = document.getElementById('country').value;
    const catalogEnv = document.getElementById('catalogEnv').value;

    let script = `Cypress.on('uncaught:exception', (err, runnable) => {
        return false;
    });

    describe('Promotions test', () => {
        const loginPageUrl = '${environment}';
        const username = '${username}';
        const password = '${password}';
        const promotionEditorRole = '${role}';
        const proceedButtonText = 'PROCEED';
        const marketingMenuText = 'Marketing';
        const promotionRulesText = 'Promotion Rules';

        before(() => {`;

    // Conditionally add the login steps based on the environment
    if (environment === 'https://backoffice.stg.iqos.com/backoffice/login.zul') {
        // STG login steps
        script += `
            // STG login
            cy.visit(loginPageUrl, { failOnStatusCode: false }).wait(1000);
            cy.get('input[placeholder="Enter user name"]:visible')
                .type(username, { force: true }).wait(300);
            cy.get('input[placeholder="Enter password"]:visible')
                .type(password, { force: true });
            cy.get('.login_btn').click({ force: true }).wait(30000);
            cy.get('.z-listcell-content').contains(promotionEditorRole).should('exist').click({ force: true }).wait(2000);
            cy.get('.yw-selector-btn').contains(proceedButtonText).should('exist').click({ force: true }).wait(15000);

            // Navigation
            cy.get('.yw-navigationNode-level1').contains(marketingMenuText).should('exist').click({ force: true }).wait(3000);
            cy.get('span.z-label').contains(promotionRulesText).should('exist').click({ force: true }).wait(5000);
        `;
    } else if (environment === 'https://backoffice.iqos.com/backoffice/login.zul' || environment === 'https://backoffice.pp.iqos.com/backoffice/login.zul') {
        // PROD or PreProd login steps
        script += `
            // PROD/PreProd login
            cy.visit('${environment}', { failOnStatusCode: false, timeout: 30000 }).then(() => {
                cy.log('Visited the URL successfully');
            }).wait(1000);
            cy.get('div.singlesignon_login_cell')
                .contains('Login with Single Sign On')
                .should('exist')
                .click({ force: true })
                .wait(20000);

            cy.origin('https://login.microsoftonline.com', () => {
                cy.get('#i0116.form-control.ltr_override.input.ext-input.text-box.ext-text-box', { timeout: 10000 })
                    .should('have.attr', 'placeholder', 'Email address, phone number or Skype')
                    .type("${username}")
                    .wait(1000);
                cy.get('.win-button.button_primary.high-contrast-overrides.button.ext-button.primary.ext-primary')
                    .contains('Next')
                    .should('exist')
                    .click({ force: true })
                    .wait(5000);
                cy.get('#i0118.form-control.input.ext-input.text-box.ext-text-box', { timeout: 10000 })
                    .should('exist')
                    .type("${password}")
                    .wait(1000);
                cy.get('input#idSIButton9.win-button.button_primary.high-contrast-overrides.button.ext-button.primary.ext-primary')
                    .should('exist')
                    .click({ force: true })
                    .wait(30000);
                cy.get('.z-listcell-content').contains(promotionEditorRole).should('exist').click({ force: true }).wait(2000);
                cy.get('.yw-selector-btn').contains(proceedButtonText).should('exist').click({ force: true }).wait(15000);
            });

            // Navigation
            cy.get('.yw-navigationNode-level1').contains(marketingMenuText).should('exist').click({ force: true }).wait(3000);
            cy.get('span.z-label').contains(promotionRulesText).should('exist').click({ force: true }).wait(5000);
        `;
    }

    // Add the rest of the Cypress script
    script += `
        });

        it('Check all promotions', () => {
    `;

    // Loop through all promotions and generate commands within the same test case
    for (let i = 1; i <= promotionCount; i++) {
        const promotionCode = document.getElementById('promotionCode' + i).value;
        const promotionName = document.getElementById('promotionName' + i).value;
        const websiteEnv = document.getElementById('websiteEnv' + i).value;
        const promotionVersion = document.getElementById('promotionVersion' + i).value;

        if (i === 1) {
            // First promotion: include 'let'
            script += `
            // Check Promotion ${i}
            let promotionCode = '${promotionCode}';
            let promotionName = '${promotionName}';
            let websiteEnv = '${websiteEnv}';
            let promotionVersion = '${promotionVersion}';\n`;
        } else {
            // Subsequent promotions: no 'let'
            script += `
            // Check Promotion ${i}
            promotionCode = '${promotionCode}';
            promotionName = '${promotionName}';
            websiteEnv = '${websiteEnv}';
            promotionVersion = '${promotionVersion}';\n`;
        }

        script += `
            searchPromotion(promotionCode, promotionName, websiteEnv, promotionVersion);\n`;
        // Generate commands for each promotion dynamically
        script += generatedCommands(i);
    }

    script += `    });
    });

    // searchPromotion function
    function searchPromotion(promotionCode, promotionName, websiteEnv, promotionVersion) {
        cy.get('.z-bandbox-input')
            .eq(6)
            .should('exist')
            .clear()
            .type(promotionCode, { force: true })
            .wait(300);

        cy.get('.yw-textsearch-searchbutton.z-button')
            .eq(1)
            .click({ force: true })
            .wait(10000);

        // Loop through pages to find the promotion
    function checkPage() {
        cy.get('body').then($body => {
            // Define a more precise selector for the rows containing promotion details
            cy.get('tr.yw-coll-browser-hyperlink').each(($row) => {

                // Ensure that the row contains all necessary values except for the version first
                if(
                    $row.find('.yw-listview-cell-label.z-label:contains("' + promotionCode + '")').length > 0 &&
                    $row.find('.yw-listview-cell-label.z-label:contains("' + promotionName + '")').length > 0 &&
                    $row.find('.yw-listview-cell-label.z-label:contains("' + websiteEnv + '")').length > 0) {

                    // Check for the correct version specifically, using each() instead of filter()
                    cy.wrap($row).within(() => {
                        cy.get('.yw-listview-cell-label.z-label').each(($el) => {
                            const versionText = $el.text().trim();
                            const className = $el.attr('class'); // Get the class name of the element
                            
                            // Ensure the class and the version both match exactly
                            if (className.includes('z-label') && versionText === promotionVersion) {
                                cy.wrap($el).click({ force: true }); // Click only if it matches the correct version
                            }
                        });
                    });
                }
            });

            // Handle pagination if necessary
            cy.get('button.z-paging-button.z-paging-next[title="Next Page"]').eq(2).then($button => {
                if ($button.is(':visible') && !$button.attr('disabled')) {
                    cy.wrap($button).click({ force: true }).wait(5000);
                    checkPage(); // Recursively check the next page
                } else {
                    cy.log('Promotion not found or next page button is not clickable');
                }
            });
        });
    }
    
    checkPage();
    }\n`;

    // Display the generated script
    document.getElementById('generatedScript').textContent = script;
    document.getElementById('generatedScript').style.display = 'block';
});


    function renumberPromotions() {
    const promotionSections = document.querySelectorAll('.promotion-section');
    promotionSections.forEach((section, index) => {
        const newIndex = index + 1;
        section.id = 'promotion' + newIndex;
        section.querySelector('h2').textContent = 'Promotion ' + newIndex;
        section.querySelector('label[for^="promotionCode"]').setAttribute('for', 'promotionCode' + newIndex);
        section.querySelector('input[id^="promotionCode"]').id = 'promotionCode' + newIndex;
        section.querySelector('label[for^="promotionName"]').setAttribute('for', 'promotionName' + newIndex);
        section.querySelector('input[id^="promotionName"]').id = 'promotionName' + newIndex;
        section.querySelector('label[for^="websiteEnv"]').setAttribute('for', 'websiteEnv' + newIndex);
        section.querySelector('input[id^="websiteEnv"]').id = 'websiteEnv' + newIndex;
        section.querySelector('label[for^="promotionVersion"]').setAttribute('for', 'promotionVersion' + newIndex);
        section.querySelector('input[id^="promotionVersion"]').id = 'promotionVersion' + newIndex;
    });
    promotionCount = promotionSections.length;
}

    // Remove a promotion section
function removePromotion(index) {
    document.getElementById('promotion' + index).remove();
    renumberPromotions();
}

// Function to remove a testing section
function removeTestingSection(button) {
    button.parentElement.remove();
}
 // Function to add a new Testing Section
function addTestingSection(promotionIndex) {
    const container = document.getElementById(`testingSectionsContainer${promotionIndex}`);
    const testingSection = document.createElement('div');
    testingSection.className = 'testing-section';

    testingSection.innerHTML = `
        <h4>Testing Section</h4>
        <div class="form-group">
            <label for="item">Item:</label>
            <select id="item" class="item-select">
                <option value="Code">Code</option>
                <option value="Promotion Description">Promotion Description</option>
                <option value="Promotion Start Date">Promotion Start Date</option>
                <option value="Promotion End Date">Promotion End Date</option>
                <option value="Deployments">Promotion module</option>
                <option value="Cart total >= {}">Cart total >= {}</option>
                <option value="Qualifying products">Qualifying products</option>
                <option value="Action rule execution allowed (true)">Action rule execution allowed (true)</option>
                <option value="Action rule execution allowed (false)">Action rule execution allowed (false)</option>
            </select>
        </div>
        <label>Expected Value: <input type="text" class="expectedValue"></label><br>
        <button type="button" onclick="removeTestingSection(this)">Remove</button>
    `;
    
    container.appendChild(testingSection);
}

// Function to generate Cypress commands based on user inputs
function generatedCommands(promotionIndex) {
    let commands = '';
    
    // Iterate over all testing sections within the current promotion section
    const testingSections = document.querySelectorAll(`#testingSectionsContainer${promotionIndex} .testing-section`);
    
    testingSections.forEach(section => {
        const selectedItem = section.querySelector('.item-select').value;
        const expectedValue = section.querySelector('.expectedValue').value;
        const country = document.getElementById('country').value;
        const catalogEnv = document.getElementById('catalogEnv').value;

        // Map the selected item to the appropriate Cypress command
        switch (selectedItem) {
            case 'Deployments':
                commands += `
                    cy.get('.z-tab-content')
                      .contains('Rule Properties')
                      .scrollIntoView()
                      .click({ force: true });
                    cy.get('.ye-default-reference-editor-selected-item-label.ye-editor-disabled.z-label')
                      .should('contain.text', '${expectedValue}');
                `;
                break;

                case 'Code':
                commands += `
                    cy.get('.z-tab-content')
                      .contains('Rule Properties')
                      .scrollIntoView()
                      .click({ force: true });
                    cy.get('.ye-input-text.ye-com_hybris_cockpitng_editor_defaulttext.z-textbox.z-textbox-readonly')
                      .should('have.value', '${expectedValue}');
                `;
                break;

                case 'Promotion Description':
                commands += `
                    cy.get('.z-tab-content')
                      .contains('Rule Properties')
                      .scrollIntoView()
                      .click({ force: true });
                    cy.get('.ye-input-text.ye-com_hybris_cockpitng_editor_defaulttext.z-textbox[value="${expectedValue}"]')
                      .should('have.value', '${expectedValue}');
                `;
                break;

                case 'Promotion Start Date':
                commands += `
                    cy.get('.z-tab-content')
                      .contains('Rule Properties')
                      .scrollIntoView()
                      .click({ force: true });
                    cy.get('.z-datebox-input')
                      .should('have.value', '${expectedValue}');
                `;
                break;

                case 'Promotion End Date':
                commands += `
                    cy.get('.z-tab-content')
                      .contains('Rule Properties')
                      .scrollIntoView()
                      .click({ force: true });
                    cy.get('.z-datebox-input')
                      .should('have.value', '${expectedValue}');
                `;
                break;
            
            
                case 'Qualifying products':
    // Split the expected value (product codes) by spaces and generate commands for each product code
    const productCodes = expectedValue.split(' '); // Split the product codes by space
    
    productCodes.forEach(productCode => {
        commands += `
            //Step 1 - Conditions & Actions tab
            cy.get('.z-tab-content')
              .contains('Conditions & Actions')
              .scrollIntoView()
              .click({ force: true });
            
            // Step 2: Open 'Container' if not already open
            cy.get('body').then($body => {
                if ($body.find('.z-label:contains("Container")').length > 0) {
                    cy.get('.z-label')
                      .contains('Container')
                      .scrollIntoView()
                      .then(($container) => {
                          if (!$container.hasClass('open')) {
                              cy.wrap($container).click({ force: true });
                          }
                      });
                } else {
                    cy.log('Container not found, skipping to the next step.');
                }
            });

            // Step 3: Open 'Qualifying products' if not already open
            cy.get('span.z-label').contains('Qualifying products').then(($label) => {
                const parent = $label.closest('div.yrb-condition');
                cy.wrap(parent).find('i').then(($icon) => {
                    if ($icon.hasClass('z-icon-caret-right')) {
                        cy.wrap($label).click();
                    } else if ($icon.hasClass('z-icon-caret-down')) {
                        cy.log('Qualifying products is already open');
                    }
                });
            });

            // Step 4: Verify the product text in the component for each product code
            cy.get('span.ye-default-reference-editor-selected-item-label.z-label')
              .should('contain.text', '[${productCode}] - ${country} Product Catalog : ${catalogEnv}');
        `;
    });
    break;

                case 'Cart total >= {}':
                commands += `
                //Click on Conditions & Actions tab
                cy.get('.z-tab-content')
                  .contains('Conditions & Actions')
                  .scrollIntoView()
                  .click({ force: true });

                cy.get('button.yw-expandCollapse')
                  .then(($button) => {
                // Check if the button's title is 'Expand Section'
                  if ($button.attr('title') === 'Expand Section') {
                // Click the button to open the section
                  cy.wrap($button).click();
                 }
                });

                cy.get('span.z-html')
                  .contains('Cart total') // Finds the element containing the text "Cart total"
                  .within(() => {
                // Check if the child contains '>=' and then the expected value
                  cy.get('span.rule-parameter').contains('>=')
                    .then(() => {
                  cy.get('span.rule-parameter').contains('{${expectedValue}}');
                 });
                 });
                `;
                break;

                case 'Action rule execution allowed (false)':
                commands += `
                    // Initial step - Conditions & Actions tab
        cy.get('.z-tab-content')
        .contains('Conditions & Actions')
        .scrollIntoView()
        .click({ force: true });

        cy.get('span.z-html')
        .eq(0)
        .within(() => {
            // Check if the desired text is present in the rule
            cy.contains('Rule with code ${expectedValue} execution allowed false')
              .should('exist');  // Verifies the existence of the text
          });
        
                `;
                break;

                case 'Action rule execution allowed (true)':
                commands += `
                    // Initial step - Conditions & Actions tab
        cy.get('.z-tab-content')
        .contains('Conditions & Actions')
        .scrollIntoView()
        .click({ force: true });

        cy.get('span.z-html')
        .eq(0)
        .within(() => {
            // Check if the desired text is present in the rule
            cy.contains('Rule with code ${expectedValue} execution allowed true')
              .should('exist');  // Verifies the existence of the text
          });
        
                `;
                break;
            
            default:
                console.error('Unknown item type:', selectedItem);
        }
    });
    
    return commands;
}

    
</script>

</body>
</html>
